import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.FileAppender;

public class Log4jDynamicFileName {

    private static final Logger logger = Logger.getLogger(Log4jDynamicFileName.class);

    public static void main(String[] args) {
        if (args.length < 3) {
            System.out.println("Please provide at least 3 arguments.");
            return;
        }

        // Construct the new log file name
        String newLogFileName = "logs/my-log-file_" + args[0] + "_" + args[1] + "_" + args[2] + ".log";

        try {
            // Read the log4j.properties file from the resources folder
            InputStream inputStream = Log4jDynamicFileName.class.getClassLoader().getResourceAsStream("log4j.properties");
            if (inputStream == null) {
                System.out.println("Log4j properties file not found.");
                return;
            }

            // Load properties
            Properties properties = new Properties();
            properties.load(inputStream);

            // Replace the filename in the properties
            String oldLogFileName = properties.getProperty("log4j.appender.file.File");
            properties.setProperty("log4j.appender.file.File", newLogFileName);

            // Save the updated properties to a temporary file
            File tempFile = File.createTempFile("log4j", ".properties");
            try (OutputStream outputStream = new FileOutputStream(tempFile)) {
                properties.store(outputStream, null);
            }

            // Reconfigure log4j with the updated properties
            PropertyConfigurator.configure(tempFile.getAbsolutePath());

            // Log messages to test the updated configuration
            logger.info("Log file name set dynamically: " + newLogFileName);
            logger.info("Application started");

            for (int i = 0; i < 5; i++) {
                logger.debug("Processing item " + i);
            }

            logger.info("Application finished");

            // Clean up temporary file
            tempFile.delete();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
