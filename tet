import xml.etree.ElementTree as ET
import pandas as pd

def parse_control_xml_to_df(file_path):
    # Parse the XML file
    tree = ET.parse(file_path)
    root = tree.getroot()

    # Dictionary to store predecessor and successor relationships
    job_map = {}

    # First pass: Collect all job names with their predecessors and successors
    for job in root.findall('.//job'):
        jobname = job.find('jobname').text if job.find('jobname') is not None else "N/A"
        predecessors = [incond.text.split('-')[0] for incond in job.findall('incond')]
        successors = [outcond.text.split('-')[0] for outcond in job.findall('outcond')]

        # Initialize job data if not already present
        if jobname not in job_map:
            job_map[jobname] = {'predecessor': set(), 'successor': set()}

        # Add predecessors and successors to the job
        job_map[jobname]['predecessor'].update(predecessors)
        job_map[jobname]['successor'].update(successors)

    # Second pass: Ensure all jobs are accounted for as successors
    for jobname, data in job_map.items():
        for successor in data['successor']:
            if successor not in job_map:
                job_map[successor] = {'predecessor': set(), 'successor': set()}
                job_map[successor]['predecessor'].add(jobname)

    # Prepare the final data for the DataFrame
    job_data = []
    for jobname, data in job_map.items():
        predecessor_str = '|'.join(data['predecessor']) if data['predecessor'] else "None"
        successor_str = '|'.join(data['successor']) if data['successor'] else "None"
        job_data.append({
            'jobname': jobname,
            'predecessor': predecessor_str,
            'successor': successor_str
        })

    # Create and return the DataFrame
    return pd.DataFrame(job_data)

# Input XML file
input_file = 'control.xml'

# Parse the XML and create the DataFrame
df = parse_control_xml_to_df(input_file)

# Save the DataFrame to CSV
output_file = 'job_details.csv'
df.to_csv(output_file, index=False)

# Print the DataFrame
print(df)
