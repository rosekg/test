Objective:
The objective of this project is to develop a Python utility that checks a given Elastic index file, processes it one by one, and deletes the previous day's records from the Elastic index if the current day's data is found in that index. Additionally, the utility will write the index delete audit information to an output Elastic audit index and update the job status in another Elastic audit index for monitoring purposes.

Overview:
The Python utility is designed to automate the process of managing data in an Elastic index. It performs the following steps:

Reads the specified Elastic index file.
Processes each record in the index file.
Checks if the current day's data exists in the index.
If the current day's data is found, deletes the previous day's records from the index.
Writes the index delete audit information to an output Elastic audit index.
Updates the job status in another Elastic audit index for monitoring purposes.
Data Flow:

Read the Elastic index file.
Iterate over each record in the index file.
Check if the current day's data is present in the Elastic index.
If the current day's data is found, delete the previous day's records from the index.
Generate audit information for the deletion operation.
Write the audit information to the output Elastic audit index.
Update the job status in the monitoring Elastic audit index.
Input:

Elastic index file: The utility takes a specified Elastic index file as input. This file contains the records that need to be processed.
Output:

Deleted records: The utility deletes the previous day's records from the Elastic index if the current day's data is found.
Audit information: The utility writes the index delete audit information to an output Elastic audit index.
Job status: The utility updates the job status in another Elastic audit index for monitoring purposes.
Tools and Functionality Used:

Python: The utility is developed using the Python programming language.
ElasticSearch: The utility interacts with the ElasticSearch database to read the index file, perform deletion operations, and write audit information.
ElasticSearch-Py: A Python library for interacting with ElasticSearch, used to establish a connection to the ElasticSearch database and perform CRUD operations.
Date and time functions: Python's built-in date and time functions are used to compare and manipulate dates for identifying the current and previous day's data.
Logging: The utility may utilize Python's logging module to log the execution details and any errors encountered during the process.
Functionality:

Read Elastic index file: The utility reads the specified Elastic index file.
Process records: It processes each record in the index file.
Check for current day's data: It checks if the current day's data exists in the Elastic index.
Delete previous day's records: If the current day's data is found, the utility deletes the previous day's records from the index.
Write index delete audit information: The utility generates audit information for the deletion operation and writes it to the output Elastic audit index.
Update job status: The utility updates the job status in the monitoring Elastic audit index to reflect the current state of the execution.
Note: The implementation details, specific libraries used, and error handling mechanisms may vary based on the requirements and preferences of the developer.
