# Common properties
kafka.process.flag=true
send.message.flag=true

# Development environment configuration
dev.bootstrap.servers=dev.kafka.server:9092
dev.group.id=dev-group
dev.input.topic=dev-input-topic
dev.output.topic=dev-output-topic
dev.schema.registry.url=http://dev.schema.registry:8081
dev.jaas.config.path=path/to/dev_jaas.conf

# Production environment configuration
prod.bootstrap.servers=prod.kafka.server:9092
prod.group.id=prod-group
prod.input.topic=prod-input-topic
prod.output.topic=prod-output-topic
prod.schema.registry.url=http://prod.schema.registry:8081
prod.jaas.config.path=path/to/prod_jaas.conf

# Pre-production environment configuration
pre.bootstrap.servers=pre.kafka.server:9092
pre.group.id=pre-group
pre.input.topic=pre-input-topic
pre.output.topic=pre-output




----#â„–##############

json

package com.example.util;

import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.Decoder;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.log4j.Logger;
import java.nio.charset.StandardCharsets;

public class JsonParserUtil {
    private static final Logger logger = Logger.getLogger(JsonParserUtil.class);

    public static String parseAvroMessage(byte[] avroData) {
        try {
            DatumReader<GenericRecord> datumReader = new SpecificDatumReader<>();
            Decoder decoder = DecoderFactory.get().binaryDecoder(avroData, null);
            GenericRecord genericRecord = datumReader.read(null, decoder);
            return genericRecord.toString();
        } catch (Exception e) {
            logger.error("Failed to parse Avro message", e);
            return null;
        }
    }
}



############


