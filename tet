const { Client } = require('@elastic/elasticsearch');
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Elasticsearch client setup
const esClient = new Client({ node: 'http://localhost:9200' });

// Bulk update API endpoint
app.post('/api/bulkUpdate', async (req, res) => {
  const updates = req.body; // Expecting an array of update objects

  if (!Array.isArray(updates) || updates.length === 0) {
    return res.status(400).json({ message: 'Invalid update payload.' });
  }

  const bulkOps = [];

  updates.forEach((doc) => {
    bulkOps.push({
      update: {
        _index: doc.index,
        _id: doc.id,
      },
    });

    bulkOps.push({
      doc: doc.rawRecord,
      doc_as_upsert: true, // Optional: creates the doc if it doesn't exist
    });
  });

  try {
    const result = await esClient.bulk({ refresh: true, body: bulkOps });

    if (result.errors) {
      const errorItems = result.items.filter((item) => item.update && item.update.error);
      return res.status(207).json({
        message: 'Some updates failed.',
        errors: errorItems,
      });
    }

    return res.status(200).json({ message: 'Bulk update successful.' });
  } catch (error) {
    console.error('Bulk update failed:', error);
    return res.status(500).json({ message: 'Bulk update failed.', error });
  }
});

// Start server
app.listen(3000, () => {
  console.log('Server running on port 3000');
});
