from elasticsearch import Elasticsearch
import pandas as pd
from datetime import datetime, timedelta

# Elasticsearch settings
es = Elasticsearch([{'host': 'localhost', 'port': 9200}])

# Read the alias names from the input file
df = pd.read_csv('alias_names.csv', names=['alias_name'])

# Get today's date
today = datetime.now().date()

# Define default retention periods for daily and weekly indices
default_daily_retention = 8
default_weekly_retention = 2

# Get the retention period for each alias
def get_retention(alias_name):
    try:
        # Check the latest document in the alias to determine the index name
        index_name = es.indices.get_alias(alias_name).keys()[0]

        # Get the creation date of the latest document in the alias
        creation_date = es.search(index=index_name, body={"size": 1, "sort": [{"@timestamp": {"order": "desc"}}]})['hits']['hits'][0]['_source']['@timestamp']
        creation_date = datetime.strptime(creation_date, '%Y-%m-%dT%H:%M:%S.%fZ').date()

        # Calculate the retention date for daily and weekly indices
        retention_days = (today - creation_date).days
        retention_weeks = retention_days // 7

        # If retention is empty, NaN, or zero, use default retention periods
        if pd.isnull(retention_days) or retention_days == 0:
            retention_days = default_daily_retention
        if pd.isnull(retention_weeks) or retention_weeks == 0:
            retention_weeks = default_weekly_retention

        return retention_days, retention_weeks
    except Exception as e:
        print(f"Error getting retention for alias {alias_name}: {e}")
        return None, None

# Get the retention periods for each alias
df[['retention_days', 'retention_weeks']] = df['alias_name'].apply(lambda x: pd.Series(get_retention(x)))

# Filter the DataFrame to get daily and weekly indices that will cross the retention date by tomorrow
daily_indices_to_delete = df[df['retention_days'] <= 1]
weekly_indices_to_delete = df[df['retention_weeks'] <= 1]

# Print the daily indices to delete
print("Daily Indices to Delete:")
print(daily_indices_to_delete)

# Print the weekly indices to delete
print("\nWeekly Indices to Delete:")
print(weekly_indices_to_delete)
