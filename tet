# Common properties
kafka.process.flag=true
send.message.flag=true

# Development environment configuration
dev.bootstrap.servers=dev.kafka.server:9092
dev.group.id=dev-group
dev.input.topic=dev-input-topic
dev.output.topic=dev-output-topic
dev.schema.registry.url=http://dev.schema.registry:8081
dev.jaas.config.path=path/to/dev_jaas.conf

# Production environment configuration
prod.bootstrap.servers=prod.kafka.server:9092
prod.group.id=prod-group
prod.input.topic=prod-input-topic
prod.output.topic=prod-output-topic
prod.schema.registry.url=http://prod.schema.registry:8081
prod.jaas.config.path=path/to/prod_jaas.conf

# Pre-production environment configuration
pre.bootstrap.servers=pre.kafka.server:9092
pre.group.id=pre-group
pre.input.topic=pre-input-topic
pre.output.topic=pre-output




----#â„–##############

json

package com.example.util;

import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.Decoder;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.log4j.Logger;
import java.nio.charset.StandardCharsets;

public class JsonParserUtil {
    private static final Logger logger = Logger.getLogger(JsonParserUtil.class);

    public static String parseAvroMessage(byte[] avroData) {
        try {
            DatumReader<GenericRecord> datumReader = new SpecificDatumReader<>();
            Decoder decoder = DecoderFactory.get().binaryDecoder(avroData, null);
            GenericRecord genericRecord = datumReader.read(null, decoder);
            return genericRecord.toString();
        } catch (Exception e) {
            logger.error("Failed to parse Avro message", e);
            return null;
        }
    }
}



############

package com.example.consumer;

import com.example.producer.KafkaJsonProducer;
import com.example.util.JsonParserUtil;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.log4j.Logger;
import io.confluent.kafka.serializers.KafkaAvroDeserializer;
import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

public class KafkaJsonConsumer {
    private static final Logger logger = Logger.getLogger(KafkaJsonConsumer.class);
    private final KafkaConsumer<String, byte[]> consumer;
    private final String topic;
    private final KafkaJsonProducer producer;

    public KafkaJsonConsumer(String bootstrapServers, String groupId, String topic, String schemaRegistryUrl) {
        this.topic = topic;

        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaAvroDeserializer.class.getName());
        props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, schemaRegistryUrl);

        this.consumer = new KafkaConsumer<>(props);
        this.consumer.subscribe(Collections.singletonList(this.topic));
    }

    public void consumeAndProcess(KafkaJsonProducer producer) {
        this.producer = producer;
        while (true) {
            ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(1000));
            for (ConsumerRecord<String, byte[]> record : records) {
                try {
                    String jsonMessage = JsonParserUtil.parseAvroMessage(record.value());
                    logger.info("Consumed message: " + jsonMessage);
                    producer.sendMessage(jsonMessage);
                } catch (Exception e) {
                    logger.error("Failed to process message", e);
                }
            }
        }
    }
}


##########


